
from aiogram import Router
from aiogram.types import Message, InputMediaPhoto
from aiogram.filters import Command
from database.db import get_all_properties
import json

router = Router()

@router.message(Command("list"))
async def list_properties(message: Message):
    properties = get_all_properties()
    if not properties:
        await message.answer("üîç –û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    for prop in properties:
        text = (
            f"üè∑ <b>{prop['title']}</b>
"
            f"üìç –ê–¥—Ä–µ—Å: {prop['address']}
"
            f"üí∞ –¶–µ–Ω–∞: {prop['price']} —Å–æ–º–æ–Ω–∏
"
            f"üõè –ö–æ–º–Ω–∞—Ç: {prop['rooms']}
"
            f"üìê –ü–ª–æ—â–∞–¥—å: {prop['area']} –º¬≤
"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {prop['contact']}"
        )
        photos = json.loads(prop["photos"])
        if photos:
            await message.bot.send_photo(chat_id=message.chat.id, photo=photos[0], caption=text, parse_mode="HTML")
        else:
            await message.answer(text, parse_mode="HTML")

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StateFilter
from states.search_property import SearchProperty
from aiogram import F
from database.db import search_properties

@router.message(Command("search"))
async def start_search(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–π–æ–Ω –∏–ª–∏ —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°–∏–Ω–æ' –∏–ª–∏ '—É–ª–∏—Ü–∞ –õ–µ–Ω–∏–Ω–∞'):")
    await state.set_state(SearchProperty.waiting_for_address)

@router.message(StateFilter(SearchProperty.waiting_for_address))
async def search_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞? (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500)")
    await state.set_state(SearchProperty.waiting_for_min_price)

@router.message(StateFilter(SearchProperty.waiting_for_min_price))
async def search_min_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(min_price=int(message.text))
    await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞? (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2000)")
    await state.set_state(SearchProperty.waiting_for_max_price)

@router.message(StateFilter(SearchProperty.waiting_for_max_price))
async def search_max_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(max_price=int(message.text))
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 2, 3):")
    await state.set_state(SearchProperty.waiting_for_rooms)

@router.message(StateFilter(SearchProperty.waiting_for_rooms))
async def search_rooms(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    await state.update_data(rooms=int(message.text))
    data = await state.get_data()
    results = search_properties(
        address=data['address'],
        min_price=data['min_price'],
        max_price=data['max_price'],
        rooms=data['rooms']
    )
    if not results:
        await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        for prop in results:
            text = (
                f"üè∑ <b>{prop['title']}</b>
"
                f"üìç –ê–¥—Ä–µ—Å: {prop['address']}
"
                f"üí∞ –¶–µ–Ω–∞: {prop['price']} —Å–æ–º–æ–Ω–∏
"
                f"üõè –ö–æ–º–Ω–∞—Ç: {prop['rooms']}
"
                f"üìê –ü–ª–æ—â–∞–¥—å: {prop['area']} –º¬≤
"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {prop['contact']}"
            )
            photos = json.loads(prop["photos"])
            if photos:
                await message.bot.send_photo(chat_id=message.chat.id, photo=photos[0], caption=text, parse_mode="HTML")
            else:
                await message.answer(text, parse_mode="HTML")
    await state.clear()

@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤")
async def search_button(message: Message, state: FSMContext):
    await start_search(message, state)

@router.message(F.text == "üìã –í—Å–µ –æ–±—ä–µ–∫—Ç—ã")
async def list_button(message: Message):
    await list_properties(message)

@router.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–≥–µ–Ω—Ç–æ–º")
async def contact_button(message: Message):
    await message.answer("üìû –¢–µ–ª–µ—Ñ–æ–Ω –∞–≥–µ–Ω—Ç–∞: +992 900 00 00 00")

from aiogram.types import CallbackQuery
from keyboards.favorites import get_fav_button
from database.db import add_to_favorites, get_favorites
from aiogram.utils.markdown import hbold

@router.callback_query(F.data.startswith("fav_"))
async def handle_add_to_favorites(callback: CallbackQuery):
    property_id = int(callback.data.split("_")[1])
    add_to_favorites(callback.from_user.id, property_id)
    await callback.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=True)

@router.message(Command("fav"))
async def show_favorites(message: Message):
    favorites = get_favorites(message.from_user.id)
    if not favorites:
        await message.answer("‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
        return

    for prop in favorites:
        text = (
            f"üè∑ <b>{prop['title']}</b>
"
            f"üìç –ê–¥—Ä–µ—Å: {prop['address']}
"
            f"üí∞ –¶–µ–Ω–∞: {prop['price']} —Å–æ–º–æ–Ω–∏
"
            f"üõè –ö–æ–º–Ω–∞—Ç: {prop['rooms']}
"
            f"üìê –ü–ª–æ—â–∞–¥—å: {prop['area']} –º¬≤
"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {prop['contact']}"
        )
        photos = json.loads(prop["photos"])
        if photos:
            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=photos[0],
                caption=text,
                parse_mode="HTML"
            )
        else:
            await message.answer(text, parse_mode="HTML")

from keyboards.sorting import sort_keyboard
from database.db import get_all_properties
from aiogram.types import CallbackQuery

@router.message(Command("sort"))
async def sort_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:", reply_markup=sort_keyboard)

@router.callback_query(F.data.startswith("sort_"))
async def handle_sorting(callback: CallbackQuery):
    sort_type = callback.data.replace("sort_", "")
    properties = get_all_properties(sort_type)

    if not properties:
        await callback.message.answer("–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        for prop in properties:
            text = (
                f"üè∑ <b>{prop['title']}</b>
"
                f"üìç –ê–¥—Ä–µ—Å: {prop['address']}
"
                f"üí∞ –¶–µ–Ω–∞: {prop['price']} —Å–æ–º–æ–Ω–∏
"
                f"üõè –ö–æ–º–Ω–∞—Ç: {prop['rooms']}
"
                f"üìê –ü–ª–æ—â–∞–¥—å: {prop['area']} –º¬≤
"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {prop['contact']}"
            )
            photos = json.loads(prop["photos"])
            if photos:
                await callback.message.bot.send_photo(
                    chat_id=callback.from_user.id,
                    photo=photos[0],
                    caption=text,
                    parse_mode="HTML"
                )
            else:
                await callback.message.answer(text, parse_mode="HTML")

    await callback.answer()
