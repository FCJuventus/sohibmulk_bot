from utils.notifier import notify_subscribers

from aiogram import Router, F
from aiogram.types import Message, InputMediaPhoto
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from states.add_property import AddProperty
from config import ADMIN_IDS
import json

router = Router()

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
@router.message(Command("add"), F.from_user.id.in_(ADMIN_IDS))
async def start_add_property(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞):")
    await state.set_state(AddProperty.waiting_for_title)

@router.message(StateFilter(AddProperty.waiting_for_title))
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞:")
    await state.set_state(AddProperty.waiting_for_address)

@router.message(StateFilter(AddProperty.waiting_for_address))
async def process_address(message: Message, state: FSMContext):
    await state.update_data(address=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(AddProperty.waiting_for_price)

@router.message(StateFilter(AddProperty.waiting_for_price))
async def process_price(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return
    await state.update_data(price=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç:")
    await state.set_state(AddProperty.waiting_for_rooms)

@router.message(StateFilter(AddProperty.waiting_for_rooms))
async def process_rooms(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.")
        return
    await state.update_data(rooms=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –≤ –º¬≤:")
    await state.set_state(AddProperty.waiting_for_area)

@router.message(StateFilter(AddProperty.waiting_for_area))
async def process_area(message: Message, state: FSMContext):
    try:
        area = float(message.text)
        await state.update_data(area=area)
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ 5 —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:")
        await state.set_state(AddProperty.waiting_for_photos)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 55.6)")

@router.message(StateFilter(AddProperty.waiting_for_photos))
async def process_photos(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return
    photos = [p.file_id for p in message.photo[-1:]]  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
    await state.update_data(photos=photos)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (–∏–ª–∏ –∏–º—è + –Ω–æ–º–µ—Ä):")
    await state.set_state(AddProperty.waiting_for_contact)

@router.message(StateFilter(AddProperty.waiting_for_contact))
async def process_contact(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    data = await state.get_data()

    text = (
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

"
        f"üè∑ –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}
"
        f"üìç –ê–¥—Ä–µ—Å: {data['address']}
"
        f"üí∞ –¶–µ–Ω–∞: {data['price']} —Å–æ–º–æ–Ω–∏
"
        f"üõè –ö–æ–º–Ω–∞—Ç: {data['rooms']}
"
        f"üìê –ü–ª–æ—â–∞–¥—å: {data['area']} –º¬≤
"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}

"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ? (–¥–∞/–Ω–µ—Ç)"
    )
    await state.set_state(AddProperty.confirmation)
    await message.answer(text)

@router.message(StateFilter(AddProperty.confirmation))
async def confirm_property(message: Message, state: FSMContext):
    if message.text.lower() != "–¥–∞":
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return

    data = await state.get_data()
    data["owner_id"] = message.from_user.id
    from database.db import add_property_to_db
    add_property_to_db(data)
    await message.answer("‚úÖ –û–±—ä–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")
    await state.clear()

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StateFilter
from aiogram import F
from states.delete_property import DeleteProperty
from database.db import get_all_properties, delete_property_by_id
import json

@router.message(Command("delete"), F.from_user.id.in_(ADMIN_IDS))
async def start_delete(message: Message, state: FSMContext):
    properties = get_all_properties()
    if not properties:
        await message.answer("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    text = "üóë <b>–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤:</b>

"
    for prop in properties:
        text += f"ID: {prop['id']} | {prop['title']} ‚Äî {prop['price']} —Å–æ–º–æ–Ω–∏
"

    await message.answer(text + "
–í–≤–µ–¥–∏—Ç–µ ID –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:", parse_mode="HTML")
    await state.set_state(DeleteProperty.waiting_for_id)

@router.message(StateFilter(DeleteProperty.waiting_for_id))
async def ask_confirmation(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    await state.update_data(delete_id=int(message.text))
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç —Å ID {message.text}? (–¥–∞/–Ω–µ—Ç)")
    await state.set_state(DeleteProperty.confirmation)

@router.message(StateFilter(DeleteProperty.confirmation))
async def confirm_delete(message: Message, state: FSMContext):
    if message.text.lower() != "–¥–∞":
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return

    data = await state.get_data()
    success = delete_property_by_id(data["delete_id"])
    if success:
        await message.answer("‚úÖ –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()

from states.edit_property import EditProperty
from database.db import get_all_properties, edit_property_field

@router.message(Command("edit"), F.from_user.id.in_(ADMIN_IDS))
async def start_edit(message: Message, state: FSMContext):
    properties = get_all_properties()
    if not properties:
        await message.answer("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    text = "üìù <b>–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤:</b>

"
    for prop in properties:
        text += f"ID: {prop['id']} | {prop['title']} ‚Äî {prop['price']} —Å–æ–º–æ–Ω–∏
"

    await message.answer(text + "
–í–≤–µ–¥–∏—Ç–µ ID –æ–±—ä–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", parse_mode="HTML")
    await state.set_state(EditProperty.waiting_for_id)

@router.message(StateFilter(EditProperty.waiting_for_id))
async def choose_field(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        return
    await state.update_data(edit_id=int(message.text))
    await message.answer(
        "–ö–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?
"
        "–î–æ–ø—É—Å—Ç–∏–º—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã: title, address, price, rooms, area, contact"
    )
    await state.set_state(EditProperty.waiting_for_field)

@router.message(StateFilter(EditProperty.waiting_for_field))
async def enter_value(message: Message, state: FSMContext):
    field = message.text.lower()
    allowed_fields = ['title', 'address', 'price', 'rooms', 'area', 'contact']
    if field not in allowed_fields:
        await message.answer("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –ø–æ–ª–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    await state.update_data(edit_field=field)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è {field}:")
    await state.set_state(EditProperty.waiting_for_value)

@router.message(StateFilter(EditProperty.waiting_for_value))
async def save_edited_value(message: Message, state: FSMContext):
    data = await state.get_data()
    success = edit_property_field(data["edit_id"], data["edit_field"], message.text)
    if success:
        await message.answer("‚úÖ –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        await message.answer("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ª–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç", F.from_user.id.in_(ADMIN_IDS))
async def add_button(message: Message, state: FSMContext):
    await start_add_property(message, state)

@router.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç", F.from_user.id.in_(ADMIN_IDS))
async def delete_button(message: Message, state: FSMContext):
    await start_delete(message, state)

@router.message(F.text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç", F.from_user.id.in_(ADMIN_IDS))
async def edit_button(message: Message, state: FSMContext):
    await start_edit(message, state)

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from utils.export import fetch_all_properties, generate_excel, generate_pdf
from aiogram import F
import os

export_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìÑ PDF", callback_data="export_pdf")],
    [InlineKeyboardButton(text="üìä Excel", callback_data="export_excel")]
])

@router.message(Command("export"), F.from_user.id.in_(ADMIN_IDS))
async def export_prompt(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:", reply_markup=export_keyboard)

@router.callback_query(F.data == "export_pdf", F.from_user.id.in_(ADMIN_IDS))
async def export_pdf(callback: CallbackQuery):
    props = fetch_all_properties()
    path = generate_pdf(props)
    with open(path, "rb") as f:
        await callback.message.answer_document(f, caption="üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await callback.answer()

@router.callback_query(F.data == "export_excel", F.from_user.id.in_(ADMIN_IDS))
async def export_excel(callback: CallbackQuery):
    props = fetch_all_properties()
    path = generate_excel(props)
    with open(path, "rb") as f:
        await callback.message.answer_document(f, caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await callback.answer()

from database.db import get_properties_by_owner
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@router.message(Command("my"), F.from_user.id.in_(ADMIN_IDS))
async def my_objects(message: Message):
    props = get_properties_by_owner(message.from_user.id)
    if not props:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
        return

    await message.answer(f"üìÇ –í—Å–µ–≥–æ –≤–∞—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(props)}")

    for prop in props:
        text = (
            f"üè∑ <b>{prop['title']}</b>
"
            f"üìç –ê–¥—Ä–µ—Å: {prop['address']}
"
            f"üí∞ –¶–µ–Ω–∞: {prop['price']} —Å–æ–º–æ–Ω–∏
"
            f"üõè –ö–æ–º–Ω–∞—Ç: {prop['rooms']}
"
            f"üìê –ü–ª–æ—â–∞–¥—å: {prop['area']} –º¬≤
"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {prop['contact']}
"
            f"üÜî ID: {prop['id']}"
        )
        photos = json.loads(prop["photos"])
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{prop['id']}")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{prop['id']}"),InlineKeyboardButton(text="üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"archive_{prop['id']}")]
        ])
        if photos:
            await message.bot.send_photo(
                chat_id=message.chat.id,
                photo=photos[0],
                caption=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
        else:
            await message.answer(text, parse_mode="HTML", reply_markup=keyboard)

from utils.importer import import_from_excel
from aiogram.types import FSInputFile
import os

@router.message(Command("import"), F.from_user.id.in_(ADMIN_IDS))
async def prompt_import(message: Message):
    await message.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏.")

@router.message(F.document.mime_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", F.from_user.id.in_(ADMIN_IDS))
async def handle_import_file(message: Message):
    file = await message.bot.get_file(message.document.file_id)
    path = f"media/import_{message.from_user.id}.xlsx"
    await message.bot.download_file(file.file_path, destination=path)

    count = import_from_excel(path, owner_id=message.from_user.id)
    await message.answer(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {count}")

@router.callback_query(F.data.startswith("archive_"), F.from_user.id.in_(ADMIN_IDS))
async def archive_property(callback: CallbackQuery):
    prop_id = callback.data.split("_")[1]
    conn = sqlite3.connect("realty.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE properties SET status = 'archived' WHERE id = ?", (prop_id,))
    conn.commit()
    conn.close()
    await callback.message.edit_caption("<i>üì¶ –û–±—ä–µ–∫—Ç –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∞—Ä—Ö–∏–≤</i>", parse_mode="HTML")
    await callback.answer("–û–±—ä–µ–∫—Ç –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω.")

@router.message(FSMAdmin.location, F.location)
async def get_location(message: Message, state: FSMContext):
    await state.update_data(latitude=message.location.latitude)
    await state.update_data(longitude=message.location.longitude)
    await state.set_state(FSMAdmin.confirm)
    await message.answer("‚úÖ –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞.")
